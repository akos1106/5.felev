IBIZA:
https://drive.google.com/drive/folders/1-5mZToV1E0lnrRmzdx-0b-DqQ4fUFYGo?usp=sharing




from dataclasses import field, dataclass
from typing import Type, cast

from faker import Faker
from faker_airtravel import AirTravelProvider
from faker_vehicle import VehicleProvider
from faker_education import SchoolProvider

from data_handling_project_master.src.data.project.base import Dataset, Entity


def generate_neptun_code():
    characters = list(string.ascii_uppercase) + [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    neptun_code = random.sample(characters, 6)
    neptun_code = ''.join([str(ch) for ch in neptun_code])
    return neptun_code

def generate_age(min_age, max_age, under_30_ratio = 0.9, above_30_ratio = 0.95):
    if random.random() < under_30_ratio:
        return random.randint(min_age, 30)
    elif random.random() < above_30_ratio:
        return random.randint(30, 50)
    else:
        return random.randint(50, max_age)

@dataclass
class StudentsDataset(Dataset):
    people: list[Person]
    schools: list[School]
    addresses: list[Address]
    studies: list[Study]

    @staticmethod
    def entity_types() -> list[Type[Entity]]:
        return [Person, School, Address, Study]

    @staticmethod
    def from_sequence(entities: list[list[Entity]]) -> Dataset:
        return StudentsDataset(
            cast(list[Person], entities[0]),
            cast(list[School], entities[1]),
            cast(list[Address], entities[2]),
            cast(list[Study], entities[3])
        )

    def entities(self) -> dict[Type[Entity], list[Entity]]:
        res = dict()
        res[Person] = self.people
        res[School] = self.schools
        res[Address] = self.addresses
        res[Study] = self.studies

        return res


    @staticmethod
    def generate(
            count_of_students: int,
            count_of_schools: int,
            count_of_addresses: int,
            count_of_studies: int):

        def generate_people(n: int, male_ratio: float = 0.5, under_50_ratio: float = 0.9, locale: str = "en_US",
                            unique: bool = False, min_age: int = 16, max_age: int = 90) -> list[Person]:
            """
            Generates people.
            """

            assert n > 0
            assert 0 <= male_ratio <= 1
            assert 16 <= min_age <= max_age

            fake = Faker(locale)
            people = []
            for i in range(n):
                neptun_code = ''
                neptun_code = generate_neptun_code()
                male = random.random() < male_ratio
                generator = fake if not unique else fake.unique
                people.append(Person(
                    neptun_code,
                    generator.name_male() if male else generator.name_female(),
                    generate_age(min_age, max_age),
                    male))

            return people


        def generate_schools(n: int,
                             unique: bool = False) -> list[School]:
            """
            Return schools.
            """
            assert n > 0

            fake = Faker()
            fake.add_provider(SchoolProvider)
            if unique:
                fake = fake.unique
            schools = []
            for i in range(n):
                schools.append(School(
                    fake.school_nces_id(),
                    fake.school_name(),
                    fake.school_level(),
                    fake.school_type(),
                    fake.school_state()
                ))

            return schools

        def generate_addresses(n: int,
                               locale: str = 'en_US',
                               unique: bool = False) -> list[Address]:
            """
            Generate addresses.
            """

            assert n > 0
            fake = Faker(locale)
            if unique:
                fake = fake.unique
            addresses = []
            for i in range(n):
                addresses.append(Address(
                    'A-' + (str(i).zfill(6)),
                    fake.postcode(),
                    fake.country(),
                    fake.city(),
                    fake.street_name(),
                    fake.building_number()
                ))

            return addresses

        def generate_studies(n: int,
                             people: list[Person],
                             schools: list[School],
                             addresses: list[Address]) -> list[Study]:
            """
            Generates studies.
            """
            assert n > 0
            assert len(people) > 0
            assert len(schools) > 0
            assert len(addresses) > 0

            rships = []                  # relationship (student - school)
            for i in range(n):
                person = random.choice(people)
                school = random.choice(schools)
                address = random.choice(addresses)
                ongoing = random.random() <= 0.5
                rships.append(
                    Study(f'S-{str(i).zfill(6)}', person.neptun_code, school.nces_id, address.address_id, 1 if ongoing else 0))

            return rships

        people = generate_people(count_of_students)
        schools = generate_schools(count_of_schools)
        addresses = generate_addresses(count_of_addresses)
        studies = generate_studies(count_of_studies, people, schools, addresses)

        return StudentsDataset(people, schools, addresses, studies)

# @dataclass
# class RentalDataset(Dataset):
#     people: list[Person]
#     cars: list[Car]
#     airports: list[Airport]
#     transactions: list[Transaction]
#
#     @staticmethod
#     def entity_types() -> list[Type[Entity]]:
#         return [Person, Car, Airport, Transaction]
#
#     @staticmethod
#     def from_sequence(entities: list[list[Entity]]) -> Dataset:
#         return RentalDataset(
#             cast(list[Person], entities[0]),
#             cast(list[Car], entities[1]),
#             cast(list[Airport], entities[2]),
#             cast(list[Transaction], entities[3])
#         )
#
#     def entities(self) -> dict[Type[Entity], list[Entity]]:
#         res = dict()
#         res[Person] = self.people
#         res[Car] = self.cars
#         res[Airport] = self.airports
#         res[Transaction] = self.transactions
#
#         return res
#
#     @staticmethod
#     def generate(
#             count_of_customers: int,
#             count_of_cars: int,
#             count_of_airports: int,
#             count_of_transactions: int):
#
#         def generate_people(n: int, male_ratio: float = 0.5, locale: str = "en_US",
#                             unique: bool = False, min_age: int = 0, max_age: int = 100) -> list[Person]:
#             """
#             Generates people.
#             """
#
#             assert n > 0
#             assert 0 <= male_ratio <= 1
#             assert 0 <= min_age <= max_age
#
#             fake = Faker(locale)
#             people = []
#             for i in range(n):
#                 male = random.random() < male_ratio
#                 generator = fake if not unique else fake.unique
#                 people.append(Person(
#                     generate_neptun_code(),
#                     generator.name_male() if male else generator.name_female(),
#                     random.randint(min_age, max_age),
#                     male))
#
#             return people
#
#         def generate_cars(n: int, automatic_ratio: float = 0.2, locale: str = "hu_HU", unique: bool = False,
#                           min_year: int = 1950, max_year: int = 2021) -> list[Car]:
#             """
#             Generates cars.
#             """
#
#             assert n > 0
#             assert 0 < automatic_ratio < 1
#             assert 1950 <= min_year
#
#             fake_plate = Faker(locale)
#             fake_plate.add_provider(VehicleProvider)
#             if unique:
#                 fake_plate = fake_plate.unique
#             fake_type = Faker()
#             fake_type.add_provider(VehicleProvider)
#
#             cars = []
#             for i in range(n):
#                 automatic = random.random() < automatic_ratio
#                 cars.append(Car(
#                     fake_plate.license_plate(),
#                     fake_type.vehicle_make(),
#                     random.randint(min_year, max_year),
#                     automatic))
#
#             return cars
#
#         def generate_airports(n: int, country: str = None, city: str = None,
#                               unique: bool = False, attempts: int = None) -> list[Airport]:
#             """
#             Generates airports.
#             """
#
#             assert n > 0
#             assert attempts is None or attempts >= n
#
#             fake = Faker()
#             fake.add_provider(AirTravelProvider)
#
#             airports = []
#             for i in range(n if attempts is None else attempts):
#                 values = fake.airport_object()
#
#                 actual = Airport(
#                     values["icao"],
#                     values["airport"],
#                     values["city"],
#                     values["state"],
#                     values["country"])
#
#                 if len(actual.code) == 0:
#                     continue
#                 if country is not None and country != actual.country:
#                     continue
#                 if city is not None and city != actual.city:
#                     continue
#                 if unique and actual in airports:
#                     continue
#
#                 airports.append(actual)
#
#             return airports
#
#         def generate_transactions(n: int, people: list[Person], cars: list[Car], airports: list[Airport]) -> list[
#             Transaction]:
#
#             """
#             Generates transactions.
#             """
#
#             assert n > 0
#             assert len(people) > 0
#             assert len(cars) > 0
#             assert len(airports) > 0
#
#             trips = []
#             for i in range(n):
#                 person = random.choice(people)
#                 car = random.choice(cars)
#                 airport = random.choice(airports)
#                 trips.append(
#                     Transaction(f"T-{str(i).zfill(6)}", airport.code, person.id, car.plate, random.randint(100, 1000)))
#
#             return trips
#
#         people = generate_people(count_of_customers)
#         cars = generate_cars(count_of_cars)
#         airports = generate_airports(count_of_airports, unique=True)
#         transactions = generate_transactions(count_of_transactions, people, cars, airports)
#         return RentalDataset(people, cars, airports, transactions)
#
#
# @dataclass
# class Transaction(Entity):
#     id: str = field(hash=True)
#     airport: str = field(repr=True, compare=False)
#     person: str = field(repr=True, compare=False)
#     car: str = field(repr=True, compare=False)
#     length: int = field(repr=True, compare=False)
#
#     @staticmethod
#     def from_sequence(seq: list[str]) -> Transaction:
#         return Transaction(seq[0], seq[1], seq[2], seq[3], int(seq[4]))
#
#     def to_sequence(self) -> list[str]:
#         return [self.id, self.airport, self.person, self.car, str(self.length)]
#
#     @staticmethod
#     def field_names() -> list[str]:
#         return ["id", "airport", "person", "car", "length"]
#
#     @staticmethod
#     def collection_name() -> str:
#         return "transactions"
#
#     @staticmethod
#     def create_table() -> str:
#         return f"""
#         CREATE TABLE {Transaction.collection_name()} (
#             id VARCHAR(8) NOT NULL PRIMARY KEY,
#             airport CHAR(4) NOT NULL,
#             person VARCHAR(8) NOT NULL,
#             car VARCHAR(20) NOT NULL,
#             length SMALLINT,
#
#             FOREIGN KEY (airport) REFERENCES {Airport.collection_name()}(code),
#             FOREIGN KEY (person) REFERENCES {Person.collection_name()}(id),
#             FOREIGN KEY (car) REFERENCES {Car.collection_name()}(plate)
#         )
#          """
#
#
# @dataclass
# class Airport(Entity):
#     code: str = field(hash=True)
#     name: str = field(repr=True, compare=False)
#     city: str = field(repr=True, compare=False)
#     state: str = field(repr=True, compare=False)
#     country: str = field(repr=True, compare=False)
#
#     @staticmethod
#     def from_sequence(seq: list[str]) -> Airport:
#         return Airport(seq[0], seq[1], seq[2], seq[3], seq[4])
#
#     def to_sequence(self) -> list[str]:
#         return [self.code, self.name, self.city, self.state, self.country]
#
#     @staticmethod
#     def field_names() -> list[str]:
#         return ["code", "name", "city", "state", "country"]
#
#     @staticmethod
#     def collection_name() -> str:
#         return "airports"
#
#     @staticmethod
#     def create_table() -> str:
#         return f"""
#         CREATE TABLE {Airport.collection_name()} (
#             code CHAR(4) NOT NULL PRIMARY KEY,
#             name VARCHAR(100),
#             city VARCHAR(50),
#             state VARCHAR(50),
#             country VARCHAR(50)
#         )
#         """
#
#
# @dataclass
# class Car(Entity):
#     plate: str = field(hash=True)
#     type: str = field(repr=True, compare=False)
#     year: int = field(repr=True, compare=False)
#     automatic: bool = field(repr=True, compare=False)
#
#     @staticmethod
#     def from_sequence(seq: list[str]) -> Car:
#         return Car(seq[0], seq[1], int(seq[2]), seq[3] == "1")
#
#     def to_sequence(self) -> list[str]:
#         return [self.plate, self.type, str(self.year), 1 if self.automatic else 0]
#
#
#     @staticmethod
#     def field_names() -> list[str]:
#         return ["plate", "type", "year", "automatic"]
#
#     @staticmethod
#     def collection_name() -> str:
#         return "cars"
#
#     @staticmethod
#     def create_table() -> str:
#         return f"""
#         CREATE TABLE {Car.collection_name()} (
#             plate VARCHAR(20) PRIMARY KEY,
#             type VARCHAR(20),
#             year SMALLINT,
#             automatic NUMBER(1)
#         )
#         """

@dataclass
class Study(Entity):
    id: str = field(hash = True)
    fk_school_id: str = field(repr = True, compare = False)
    fk_neptun_code: str = field(repr = True, compare = False)
    fk_address_id: str = field(repr = True, compare = False)
    ongoing: bool = field(repr = True, compare = False)

    @staticmethod
    def from_sequence(seq: list[str]) -> Study:
        return Study(seq[0], seq[1], seq[2], seq[3], seq[4] == 1)

    def to_sequence(self) -> list[str]:
        return [self.id, self.fk_school_id, self.fk_neptun_code, self.fk_address_id, 1 if self.ongoing else 0]

    @staticmethod
    def field_names() -> list[str]:
        return ['id', 'fk_school_id', 'fk_neptun_code', 'fk_address_id', 'ongoing']

    @staticmethod
    def collection_name() -> str:
        return 'study'

    @staticmethod
    def create_table() -> str:
        return f"""
            CREATE TABLE {Study.collection_name()} (
                ID VARCHAR(8) NOT NULL PRIMARY KEY,
                FK_SCHOOL_ID VARCHAR2(12) NOT NULL,
                FK_NEPTUN_CODE VARCHAR2(300) NOT NULL,
                FK_ADDRESS_ID VARCHAR2(8) NOT NULL,
                ONGOING NUMBER(1),
                
                FOREIGN KEY (fk_school_id) REFERENCES
                {School.collection_name()} (nces_id),
                
                FOREIGN KEY (fk_neptun_code) REFERENCES
                {Person.collection_name()} (neptun_code),
                
                FOREIGN KEY (fk_address_id) REFERENCES
                {Address.collection_name()} (address_id)
            )
        """



@dataclass
class Person(Entity):
    neptun_code: str = field(hash=True)
    name: str = field(repr=True, compare=False)
    age: int = field(repr=True, compare=False)
    male: bool = field(default=True, repr=True, compare=False)

    @staticmethod
    def from_sequence(seq: list[str]) -> Person:
        return Person(seq[0], seq[1], int(seq[2]), seq[3] == "1")

    def to_sequence(self) -> list[str]:
        return [self.neptun_code, self.name, str(self.age), 0 if self.male else 1]

    @staticmethod
    def field_names() -> list[str]:
        return ["neptun_code", "name", "age", "male"]

    @staticmethod
    def collection_name() -> str:
        return "people"

    @staticmethod
    def create_table() -> str:
        return f"""
        CREATE TABLE {Person.collection_name()} (
            NEPTUN_CODE VARCHAR2(8) PRIMARY KEY,
            NAME VARCHAR2(50),
            AGE NUMBER(5),
            MALE NUMBER(1)
        )
        """


@dataclass
class School(Entity):
    nces_id: str = field(hash = True)
    name: str = field(repr = True, compare = False)
    # district: str = field(repr = True, compare = False)
    level: str = field(repr = True, compare = False)
    type: str = field(repr = True, compare = False)
    state: str = field(repr = True, compare = False)

    @staticmethod
    def from_sequence(seq: list[str]) -> School:
        return School(seq[0], seq[1], seq[2], seq[3], seq[4])

    def to_sequence(self) -> list[str]:
        return [self.nces_id, self.name, self.level, self.type, self.state]

    @staticmethod
    def field_names() -> list[str]:
        return ['nces_id', 'school_name', 'school_level', 'school_type', 'school_state']

    @staticmethod
    def collection_name() -> str:
        return 'school'

    @staticmethod
    def create_table() -> str:
        return f"""
        CREATE TABLE {School.collection_name()} (
            NCES_ID VARCHAR2(12) PRIMARY KEY,
            SCHOOL_NAME VARCHAR2(60),
            SCHOOL_LEVEL VARCHAR2(10),
            SCHOOL_TYPE VARCHAR2(28),
            SCHOOL_STATE VARCHAR2(2)
        )
        """


@dataclass
class Address(Entity):
    address_id: str = field(hash = True)
    postcode: str = field(repr = True, compare = False)
    country: str = field(repr = True, compare = False)
    city: str = field(repr = True, compare = False)
    street: str = field(repr = True, compare = False)
    building_number: str = field(repr = True, compare = False)

    @staticmethod
    def from_sequence(seq: list[str]) -> Address:
        return Address(seq[0], seq[1], seq[2], seq[3], seq[4], seq[5])

    def to_sequence(self) -> list[str]:
        return [self.address_id, self.postcode, self.country, self.city, self.street, self.building_number]

    @staticmethod
    def field_names() -> list[str]:
        return ['address_id', 'postcode', 'country', 'city', 'street', 'building_number']

    @staticmethod
    def collection_name() -> str:
        return 'address'

    @staticmethod
    def create_table() -> str:
        return f"""
        CREATE TABLE {Address.collection_name()} (
            ADDRESS_ID VARCHAR2(8) PRIMARY KEY,
            POSTCODE VARCHAR2(20),
            COUNTRY VARCHAR2(60),
            CITY VARCHAR2(30),
            STREET VARCHAR2(40),
            BUILDING_NUMBER VARCHAR2(10)
        )
        """
