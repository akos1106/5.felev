def gyorshatvany(alap, exp, mod):
    alap = alap % mod
    if (exp == 0):
        return 0
    elif (exp == 1):
        return alap
    elif (exp % 2 == 0):
        return gyorshatvany(alap * alap % mod, exp / 2, mod)
    else:
        return alap * gyorshatvany(alap, exp - 1, mod) % mod


def ext_eucl(a, b):
    x0 = 1
    x1 = 0
    y0 = 0
    y1 = 1
    s = 1
    while b != 0:
        r = a % b
        q = a // b
        a = b
        b = r
        x = x1
        y = y1
        x1 = q * x1 + x0
        y1 = q * y1 + y0
        x0 = x
        y0 = y
        s = -s
    x = s * x0
    y = -s*y0
    (d, x, y) = (a, x, y)
    return (d, x, y)


def kinaimaradek(c: list, m: list):
    M=1
    for mi in m:
        M*=mi

    Melemek=[]
    for mi in m:
        Melemek.append(M/mi)

    yelemek=[]
    for i in range(len(m)):
        (a,b,z)=ext_eucl(Melemek[i],m[i])
        if b<0:
            yelemek.append(b+m[i])
        else:
            yelemek.append(b)

    summ=0
    for i in range(len(m)):
        summ+=(c[i]*yelemek[i]*Melemek[i])

    return summ % M

def miller_rabin(p,a):
    S=0
    temp=p-1
    while temp % 2 ==0:
        S+=1
        temp=temp//2

    d=(p-1)/(2**S)

    if gyorshatvany(a,d,p)==1:
        return "Prím vagy összetett a szám a "+str(p)
    else:
        for r in range(S-1):
            if gyorshatvany(a,d*(2**r),p)==p-1:
                return "Prím vagy összetett a szám a "+str(p)
        return "A "+str(p)+" szám összetett"


if __name__ == "__main__":
    # print(gyorshatvany(11, 121, 243))
    # print(ext_eucl(20,3))
    # print(kinaimaradek([0,1,2],[5,3,4]))
    print(miller_rabin(197,7))
    print(miller_rabin(243, 11))
